@page "/Login"
@inherits LayoutComponentBase
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation

<PageTitle>Login</PageTitle>

<div class="login-page">
    <div class="login-form">
        <h3>Login</h3>

        <EditForm Model="@user" OnValidSubmit="@HandleValidSubmit" @formname="frmlogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <input type="hidden" name="formName" value="loginForm" />

            <div>
                <label for="username">Username:</label>
                <InputText id="Username" @bind-Value="user.Username" />
                <ValidationMessage For="@(() => user.Username)" />
            </div>

            <div>
                <label for="password">Password:</label>
                <InputText id="password" @bind-Value="user.Password" type="password" />
                <ValidationMessage For="@(() => user.Password)" />
            </div>

            <div>
                <label>
                    <InputCheckbox @bind-Value="user.RememberMe" />
                    Remember Me
                </label>
            </div>

            <button type="submit" class="btn btn-primary">Login</button>

        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">@errorMessage</div>
        }
    </div>
</div>

@code {
    [SupplyParameterFromForm(FormName = "main")] public string? Name { get; set; }
    string? Message { get; set; }

    void Submit()
    {
        if (!string.IsNullOrWhiteSpace(Name))
        {
            Message = $"Hello, {Name} to your Blazor App!";
        }
    }

    public class UserModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
        public bool RememberMe { get; set; }
    }

    private UserModel user = new();
    private string errorMessage;

    private void HandleValidSubmit()
    {
        // lógica de autenticación
        if (AuthenticateUser(user.Username, user.Password))
        {
            Navigation.NavigateTo("/Home");
        }
        else
        {
            errorMessage = "Usuario o contraseña incorrectos.";
        }
    }

    private bool AuthenticateUser(string username, string password)
    {
        return username == "admin" && password == "admin";
    }

    private UserModel login = new UserModel();

    private async Task IniciarSesion()
    {
        //var loginResponse = await httpClient.PostAsJsonAsync<LoginDTO>("/api/Usuario/Login", login);
        //if (loginResponse.IsSuccessStatusCode)
        //{
        //    var sesionUsuario = await loginResponse.Content.ReadFromJsonAsync<SesionDTO>();
        //    var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
        //    await autenticacionExt.ActualizarEstadoAutenticacion(sesionUsuario);
        //
        //    navManager.NavigateTo("/Index");
        //}
    }
}

<style>
    .login-page {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #f0f0f0;
    }

    .login-form {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

        .login-form h3 {
            margin-bottom: 20px;
        }

        .login-form div {
            margin-bottom: 10px;
        }

        .login-form label {
            display: block;
            margin-bottom: 5px;
        }

        .login-form button {
            width: 100%;
            padding: 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

            .login-form button:hover {
                background-color: #0056b3;
            }

    .error-message {
        color: red;
        margin-top: 10px;
    }

</style>
